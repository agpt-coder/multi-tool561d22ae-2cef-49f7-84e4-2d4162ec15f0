// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
}

enum SubscriptionPlan {
  BASIC
  PREMIUM
  ENTERPRISE
}

enum TransactionStatus {
  SUCCESS
  FAILED
  PENDING
}

model User {
  id           String         @id @default(dbgenerated("gen_random_uuid()"))
  email        String         @unique
  password     String
  role         Role           @default(DEVELOPER)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ApiKeys      ApiKey[]
  UserProfiles UserProfile[]
  ApiRequests  ApiRequest[]
  Subscription Subscription[]
}

model ApiKey {
  id          String       @id @default(dbgenerated("gen_random_uuid()"))
  key         String       @unique
  userId      String
  User        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  ApiRequests ApiRequest[]
}

model UserProfile {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  userId    String
  name      String?
  company   String?
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ApiRequest {
  id              String   @id @default(dbgenerated("gen_random_uuid()"))
  userId          String   @map("user_id")
  apiKeyId        String   @map("api_key_id")
  endpoint        String
  requestPayload  Json?
  responsePayload Json?
  createdAt       DateTime @default(now())
  User            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ApiKey          ApiKey   @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
}

model Subscription {
  id          String             @id @default(dbgenerated("gen_random_uuid()"))
  userId      String
  status      SubscriptionStatus
  plan        SubscriptionPlan
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  User        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  Transaction Transaction[]
}

model Transaction {
  id             String            @id @default(dbgenerated("gen_random_uuid()"))
  subscriptionId String
  amount         Float
  currency       String
  status         TransactionStatus
  createdAt      DateTime          @default(now())
  Subscription   Subscription      @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

model FeatureAccess {
  id           String           @id @default(dbgenerated("gen_random_uuid()"))
  featureName  String
  planRequired SubscriptionPlan
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Analytics {
  id                  String   @id @default(dbgenerated("gen_random_uuid()"))
  endpoint            String
  requestCount        Int
  successCount        Int
  errorCount          Int
  averageResponseTime Float
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

enum Role {
  ADMIN
  DEVELOPER
  ENTERPRISE
}

